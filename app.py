import os
import streamlit as st
from ai_agent import create_agent, get_default_agent
from utils.config import DATABASE_SOURCES, DEFAULT_SHEET_URL
import time

# C·∫•u h√¨nh trang
st.set_page_config(page_title="RealEstate AI Agent", layout="wide")
st.title("üè† AI Tr·ª£ l√Ω B·∫•t ƒë·ªông s·∫£n TP.HCM")
st.subheader("T√¨m s·∫£n ph·∫©m ph√π h·ª£p trong 3 gi√¢y")

# Sidebar
with st.sidebar:
    st.header("C√†i ƒë·∫∑t")
    
    # OpenAI API Key
    api_key = st.text_input("OpenAI API Key", type="password")
    if api_key:
        os.environ["OPENAI_API_KEY"] = api_key
    
    st.divider()
    
    # Database Source Selection
    st.subheader("üìä Ngu·ªìn d·ªØ li·ªáu")
    
    # Create source options for selectbox
    source_options = {f"{key} - {value['name']}": key for key, value in DATABASE_SOURCES.items()}
    selected_source_display = st.selectbox(
        "Ch·ªçn ngu·ªìn d·ªØ li·ªáu:",
        options=list(source_options.keys()),
        index=0
    )
    selected_source = source_options[selected_source_display]
    
    # Show source description
    source_info = DATABASE_SOURCES[selected_source]
    st.info(f"**{source_info['name']}**\n{source_info['description']}")
    
    # Google Sheets specific settings
    sheet_url = None
    if selected_source == 'gsheet':
        st.subheader("üîó Google Sheets")
        sheet_url = st.text_input(
            "Google Sheet URL:",
            value=DEFAULT_SHEET_URL,
            help="Paste the full URL of your Google Sheet"
        )
        
        if not sheet_url:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Google Sheet URL ƒë·ªÉ s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ Google Sheets")
        
        # Check for credentials file
        credentials_path = "credentials.json"
        if not os.path.exists(credentials_path):
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y file credentials.json")
            st.info("""
            **ƒê·ªÉ s·ª≠ d·ª•ng Google Sheets:**
            1. T·∫°o Service Account trong Google Cloud Console
            2. T·∫£i file credentials.json
            3. ƒê·∫∑t file v√†o th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
            4. Chia s·∫ª Google Sheet v·ªõi email c·ªßa Service Account
            """)
    
    st.divider()
    
    # Initialize/Update Agent Button
    if st.button("üîÑ Kh·ªüi t·∫°o Agent", type="primary"):
        if selected_source == 'gsheet' and not sheet_url:
            st.error("Vui l√≤ng nh·∫≠p Google Sheet URL")
        else:
            with st.spinner("ƒêang kh·ªüi t·∫°o AI Agent..."):
                try:
                    # Create new agent
                    agent, df = create_agent(
                        source_type=selected_source,
                        sheet_url=sheet_url
                    )
                    
                    # Store in session state
                    st.session_state.agent = agent
                    st.session_state.data_source = selected_source
                    st.session_state.dataframe = df
                    
                    st.success(f"‚úÖ Agent ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi {len(df)} s·∫£n ph·∫©m t·ª´ {source_info['name']}")
                    
                except Exception as e:
                    st.error(f"‚ùå L·ªói kh·ªüi t·∫°o agent: {str(e)}")
    
    st.divider()
    
    # Usage Instructions
    st.info("""
    **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
    - Ch·ªçn ngu·ªìn d·ªØ li·ªáu ph√π h·ª£p
    - Nh·∫•n "Kh·ªüi t·∫°o Agent" ƒë·ªÉ c·∫≠p nh·∫≠t
    - Nh·∫≠p nhu c·∫ßu kh√°ch h√†ng b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n
    - V√≠ d·ª•: 
      "C·∫ßn nh√† ph·ªë Qu·∫≠n 7 gi√° d∆∞·ªõi 20 t·ª∑, 3 ph√≤ng ng·ªß"
      "T√¨m cƒÉn h·ªô trung t√¢m c√≥ h·ªì b∆°i, gi√° 5-8 t·ª∑"
    """)

# Initialize session state
if "messages" not in st.session_state:
    st.session_state.messages = []
if "agent" not in st.session_state:
    st.session_state.agent = get_default_agent()
if "data_source" not in st.session_state:
    st.session_state.data_source = 'sample'

# Display current data source
try:
    if st.session_state.data_source and st.session_state.data_source in DATABASE_SOURCES:
        source_info = DATABASE_SOURCES[st.session_state.data_source]
        st.info(f"üìä **Ngu·ªìn d·ªØ li·ªáu hi·ªán t·∫°i:** {source_info['name']}")
except:
    pass  # Ignore session state errors when not running in Streamlit

# Chat interface
try:
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    if prompt := st.chat_input("Nh·∫≠p nhu c·∫ßu kh√°ch h√†ng..."):
        # Check if agent is available
        if st.session_state.agent is None:
            st.error("‚ùå Agent ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng ch·ªçn ngu·ªìn d·ªØ li·ªáu v√† nh·∫•n 'Kh·ªüi t·∫°o Agent'")
        else:
            st.session_state.messages.append({"role": "user", "content": prompt})
            
            with st.chat_message("user"):
                st.markdown(prompt)
            
            with st.chat_message("assistant"):
                message_placeholder = st.empty()
                full_response = ""
                
                # X·ª≠ l√Ω v·ªõi AI agent
                try:
                    start_time = time.time()
                    response = st.session_state.agent.invoke(prompt)
                    processing_time = time.time() - start_time
                    
                    # Hi·ªÉn th·ªã t·ª´ng t·ª´ v·ªõi hi·ªáu ·ª©ng g√µ
                    for chunk in response.split():
                        full_response += chunk + " "
                        time.sleep(0.05)
                        message_placeholder.markdown(full_response + "‚ñå")
                    
                    message_placeholder.markdown(full_response)
                    st.caption(f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {processing_time:.2f}s")
                    
                except Exception as e:
                    st.error(f"L·ªói: {str(e)}")
                    full_response = f"Xin l·ªói, c√≥ l·ªói x·∫£y ra: {str(e)}"
            
            st.session_state.messages.append({"role": "assistant", "content": full_response})
except:
    pass  # Ignore session state errors when not running in Streamlit