import os
import streamlit as st
from ai_agent import create_agent
from utils.config import DATABASE_SOURCES, DEFAULT_SHEET_URL
import time

# C·∫•u h√¨nh trang
st.set_page_config(page_title="RealEstate AI Agent", layout="wide")
st.title("üè† AI Tr·ª£ l√Ω B·∫•t ƒë·ªông s·∫£n TP.HCM")
st.subheader("T√¨m s·∫£n ph·∫©m ph√π h·ª£p trong 3 gi√¢y")

# Sidebar
with st.sidebar:
    st.header("C√†i ƒë·∫∑t")
    
    # OpenAI API Key
    api_key = st.text_input("OpenAI API Key", type="password", help="Enter your OpenAI API key to enable AI features")
    
    # Set API key in environment if provided
    if api_key:
        os.environ["OPENAI_API_KEY"] = api_key
        st.success("‚úÖ API Key set successfully!")
    else:
        st.warning("‚ö†Ô∏è Please enter your OpenAI API key to use the AI agent")
    
    st.divider()
    
    # Database Source Selection
    st.subheader("üìä Ngu·ªìn d·ªØ li·ªáu")
    
    # Create source options for selectbox
    source_options = {f"{key} - {value['name']}": key for key, value in DATABASE_SOURCES.items()}
    selected_source_display = st.selectbox(
        "Ch·ªçn ngu·ªìn d·ªØ li·ªáu:",
        options=list(source_options.keys()),
        index=0
    )
    selected_source = source_options[selected_source_display]
    
    # Show source description
    source_info = DATABASE_SOURCES[selected_source]
    st.info(f"**{source_info['name']}**\n{source_info['description']}")
    
    # File upload for CSV/Excel
    file_path = None
    if selected_source in ['csv', 'excel']:
        st.subheader("üìÅ Upload File")
        uploaded_file = st.file_uploader(
            f"Upload {selected_source.upper()} file:",
            type=['csv', 'xls', 'xlsx'] if selected_source == 'excel' else ['csv'],
            help=f"Upload your {selected_source.upper()} file here"
        )
        
        if uploaded_file is not None:
            # Save uploaded file temporarily
            import tempfile
            with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{selected_source}') as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                file_path = tmp_file.name
            
            st.success(f"‚úÖ File uploaded: {uploaded_file.name}")
    
    # Google Sheets specific settings
    sheet_url = None
    if selected_source == 'gsheet':
        st.subheader("üîó Google Sheets")
        sheet_url = st.text_input(
            "Google Sheet URL:",
            value=DEFAULT_SHEET_URL,
            help="Paste the full URL of your Google Sheet"
        )
        
        if not sheet_url:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Google Sheet URL ƒë·ªÉ s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ Google Sheets")
        
        # Check for credentials file
        credentials_path = "credentials.json"
        if not os.path.exists(credentials_path):
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y file credentials.json")
            st.info("""
            **ƒê·ªÉ s·ª≠ d·ª•ng Google Sheets:**
            1. T·∫°o Service Account trong Google Cloud Console
            2. T·∫£i file credentials.json
            3. ƒê·∫∑t file v√†o th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
            4. Chia s·∫ª Google Sheet v·ªõi email c·ªßa Service Account
            """)
    
    st.divider()
    
    # Initialize/Update Agent Button
    if st.button("üîÑ Kh·ªüi t·∫°o Agent", type="primary"):
        # Check if API key is provided
        if not api_key:
            st.error("‚ùå Vui l√≤ng nh·∫≠p OpenAI API Key tr∆∞·ªõc khi kh·ªüi t·∫°o Agent")
        elif selected_source == 'gsheet' and not sheet_url:
            st.error("Vui l√≤ng nh·∫≠p Google Sheet URL")
        elif selected_source in ['csv', 'excel'] and not file_path:
            st.error(f"Vui l√≤ng upload file {selected_source.upper()}")
        else:
            with st.spinner("ƒêang kh·ªüi t·∫°o AI Agent..."):
                try:
                    # Create new agent
                    agent, df = create_agent(
                        source_type=selected_source,
                        sheet_url=sheet_url,
                        file_path=file_path
                    )
                    
                    # Store in session state
                    st.session_state.agent = agent
                    st.session_state.data_source = selected_source
                    st.session_state.dataframe = df
                    st.session_state.api_key_set = True
                    
                    st.success(f"‚úÖ Agent ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi {len(df)} s·∫£n ph·∫©m t·ª´ {source_info['name']}")
                    
                except Exception as e:
                    st.error(f"‚ùå L·ªói kh·ªüi t·∫°o agent: {str(e)}")
                    if "api_key" in str(e).lower():
                        st.info("üí° H√£y ki·ªÉm tra l·∫°i OpenAI API Key c·ªßa b·∫°n")
    
    st.divider()
    
    # Usage Instructions
    st.info("""
    **üí° C√°ch s·ª≠ d·ª•ng:**
    1. Nh·∫≠p OpenAI API Key
    2. Ch·ªçn ngu·ªìn d·ªØ li·ªáu ph√π h·ª£p
    3. Upload file ho·∫∑c nh·∫≠p URL Google Sheets
    4. Nh·∫•n "Kh·ªüi t·∫°o Agent"
    5. B·∫Øt ƒë·∫ßu chat v·ªõi AI
    """)

# Main chat interface
if 'agent' not in st.session_state or not st.session_state.get('api_key_set', False):
    st.info("""
    üöÄ **Ch√†o m·ª´ng ƒë·∫øn v·ªõi AI Tr·ª£ l√Ω B·∫•t ƒë·ªông s·∫£n!**
    
    **ƒê·ªÉ b·∫Øt ƒë·∫ßu:**
    1. Nh·∫≠p **OpenAI API Key** ·ªü sidebar b√™n tr√°i
    2. Ch·ªçn **ngu·ªìn d·ªØ li·ªáu** (khuy·∫øn ngh·ªã: "Production Excel (LandSoft)")
    3. Nh·∫•n **"üîÑ Kh·ªüi t·∫°o Agent"**
    4. B·∫Øt ƒë·∫ßu **chat** v·ªõi AI!
    
    **üí° Kh√¥ng c√≥ API Key?**
    - ƒêƒÉng k√Ω t·∫°i [OpenAI Platform](https://platform.openai.com/)
    - T·∫°o API key m·ªõi
    - Copy v√† paste v√†o √¥ "OpenAI API Key"
    """)
else:
    # Chat interface
    st.subheader("üí¨ Chat v·ªõi AI")
    
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Display chat messages
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Chat input
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Display user message
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Display assistant response
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            
            try:
                # Get response from agent
                response = st.session_state.agent.invoke(prompt)
                
                # Simulate streaming response
                for chunk in response.split():
                    full_response += chunk + " "
                    time.sleep(0.05)
                    message_placeholder.markdown(full_response + "‚ñå")
                
                message_placeholder.markdown(full_response)
                
            except Exception as e:
                message_placeholder.error(f"‚ùå L·ªói: {str(e)}")
                full_response = f"Xin l·ªói, c√≥ l·ªói x·∫£y ra: {str(e)}"
        
        # Add assistant response to chat history
        st.session_state.messages.append({"role": "assistant", "content": full_response})

# Footer
st.divider()
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>üè† Real Estate AI Agent - Powered by OpenAI & LangChain</p>
</div>
""", unsafe_allow_html=True)